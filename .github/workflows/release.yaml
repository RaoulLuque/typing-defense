name: release-flow

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version - in the form of v1.2.3'
        required: true
        type: string

env:
  # This variable is used to name release output files.
  GAME_EXECUTABLE_NAME: typing_defense

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  build-linux:
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev
      - name: Build release
        run: |
          cargo build --profile dist
      - name: Prepare release
        run: |
          chmod +x target/dist/${{ env.GAME_EXECUTABLE_NAME }}
          mv target/dist/${{ env.GAME_EXECUTABLE_NAME }} .
      - name: Bundle release
        run: |
          tar -czf ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz ${{ env.GAME_EXECUTABLE_NAME }} assets
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_linux.tar.gz
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_linux.tar.gz
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-windows:
    runs-on: windows-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
      BUILD_INSTALLER: ${{ false }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
    #   - name: Install dotnet
    #     if: ${{ env.BUILD_INSTALLER }}
    #     uses: actions/setup-dotnet@v3
    #     with:
    #       global-json-file: build/windows/installer/global.json
      - name: Build release
        run: |
          cargo build --profile dist
      - name: Prepare release
        run: |
          mkdir target/dist/assets && cp -r assets target/dist/assets
      - name: Zip release
        uses: vimtor/action-zip@v1.1
        with:
          files: target/dist/assets/ target/dist/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
    #   - name: Create Installer
    #     if: ${{ env.BUILD_INSTALLER }}
    #     run: dotnet build -p:Version=${{ env.VERSION }} -c Release build/windows/installer/Installer.wixproj --output installer
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
          tag: ${{ env.VERSION }}
          overwrite: true
    #   - name: Upload installer
    #     if: ${{ env.BUILD_INSTALLER }}
    #     uses: svenstaro/upload-release-action@v2
    #     with:
    #       repo_token: ${{ secrets.GITHUB_TOKEN }}
    #       file: installer/en-US/installer.msi
    #       asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.msi
    #       release_name: ${{ env.VERSION }}
    #       tag: ${{ env.VERSION }}
    #       overwrite: true

  build-web:
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev; sudo apt-get install libwayland-dev libxkbcommon-dev; sudo apt-get install libwayland0
      - name: Install trunk
        uses: jetli/trunk-action@v0.4.0
        with:
          version: latest
      - name: Add wasm target
        run: |
          rustup target add wasm32-unknown-unknown
      - name: Build Release
        run: |
          trunk build --release
      - name: Optimize Wasm
        uses: NiklasEi/wasm-opt-action@v2
        with:
          file: dist/*.wasm
      - name: Zip release
        uses: vimtor/action-zip@v1.1
        with:
          files: dist/
          dest: ${{ env.GAME_EXECUTABLE_NAME }}_web.zip
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_web.zip
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_web.zip
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true